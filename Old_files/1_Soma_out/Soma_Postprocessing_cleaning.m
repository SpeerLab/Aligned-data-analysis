clear;clc
%
%On 7.13.2020, in some images artefacts are found, obviously, inside the
%soma area. They were not filtered out in the first step because the soma is so
%dense and unclear in the original Storm green image, and a perfect filter
%can't be generated by adjusting parameters. Here the red channel will be used on the final image to
%find densely clustered puncta to generate a filter. 
%%
%render the image
Base_folder = 'Y:\Chenghang\04_4_Color\Control_Group\chenghaz_014_XB2_P2_Control_A\';
expfolder = [Base_folder 'analysis\elastic_align\storm_merged\'];
outpath = [Base_folder 'analysis\Result\'];
files = [dir([expfolder '*.tif']) dir([expfolder '*.png'])];
infos = imfinfo([expfolder files(1,1).name]);
info = infos;
num_images = numel(files);
furtherds = 1;

load([outpath 'R_paired_2.mat'])
statsR_temp = statsRwater_sss;
%%
%Determine the watershed number of each cluster
num_watershed = zeros(numel(statsR_temp),1);
for i = 1:numel(statsR_temp)
    disp(i)
    size1x = min(statsR_temp(i).PixelList(:,2));
    size1y = min(statsR_temp(i).PixelList(:,1));
    size1z = min(statsR_temp(i).PixelList(:,3));
    size2x = max(statsR_temp(i).PixelList(:,2));
    size2y = max(statsR_temp(i).PixelList(:,1));
    size2z = max(statsR_temp(i).PixelList(:,3));
    size_x = size2x - size1x + 1;
    size_y = size2y - size1y + 1;
    size_z = size2z - size1z + 1;
    new_temp = zeros(size_x,size_y,size_z,'uint8');
    
    for j = 1:numel(statsR_temp(i).PixelValues)
        new_temp(statsR_temp(i).PixelList(j,2) - size1x + 1,statsR_temp(i).PixelList(j,1) - size1y +1,statsR_temp(i).PixelList(j,3) - size1z +1) = statsR_temp(i).PixelValues(j);
    end
    
    I2 = imcomplement(new_temp);
    I3 = imhmin(I2,10);
    L = watershed(I3);

    num_watershed(i) = max(L(:));
end
%%

%Check the distribution of num_watershed manually if necessary


%%
%Select threshold, generate a test image and determine whether the filter is good, manually
thre = multithresh(num_watershed,2);
% thre = thre(2);
thre = 32;
%Tested threshold around 32. 
statsR_temp_temp = statsR_temp(num_watershed > thre);
numel(statsR_temp_temp)
%%
%These codes are used for testing the threshold

new_R = zeros(ceil((infos(1,1).Height*furtherds)),ceil((infos(1,1).Width*furtherds)),num_images,'uint8');
for i = 1:size(statsR_temp_temp,1)
    PixelList = statsR_temp_temp(i).PixelList;
    PixelValues = statsR_temp_temp(i).PixelValues;
    for j = 1:size(PixelList,1)
        y = PixelList(j,1);
        x = PixelList(j,2);
        z = PixelList(j,3);
        new_R(x,y,z) = 255;
    end
end
imwrite(new_R(:,:,1),[outpath 'Post_soma_filtered.tif']);
%%
%delete old statsR from the previous statsRwater_ssss list
clear statsRwater_ssss
statsRwater_ssss = statsR_temp(num_watershed<=thre);
%%
%
voxel = [15.5,15.5,70];
statsRwater = statsRwater_ssss;
load([outpath 'G_paired_3.mat']);
statsGwater = statsGwater_ssss;
clear statsGwater_ssss
%
clear BP BG bg2
disp('allocating arrays')
BP = zeros(info.Height, info.Width, num_images,'uint8');
BP2 = zeros(info.Height, info.Width, num_images,'uint8');
for i = 1:numel(statsGwater)
    disp(int2str(i))
    BP(statsGwater(i).PixelIdxList)=statsGwater(i).PixelValues;  
end
%
for i = 1:numel(statsRwater)
    disp(int2str(i))
    BP2(statsRwater(i).PixelIdxList)=statsRwater(i).PixelValues;  
end
%
disp('loading data')
%
for i=numel(statsGwater):-1:1
    disp(i)
statsGwater(i).tints_p140 = [];
statsGwater(i).volume_p140 = [];
statsGwater(i).area_p140 = [];
statsGwater(i).WeightedCentroid_p140 = [];
statsGwater(i).statxtureP_140all = [];
statsGwater(i).statxtureP_140pos = [];
centG_p140(i,1:3) = 0;
tintsG_p140(i) = 0;
volumeG_p140(i) =0;


statsGwater(i).statxture_all = [];
statsGwater(i).statxture_pos = [];
statxture_all(i,1:6) = 0;
statxture_pos(i,1:6) = 0;

%try preproccessing the BP varialbe in a for loop
   minpix = min(statsGwater(i).PixelList);  maxpix = max(statsGwater(i).PixelList);
   min1 = minpix(1)-30; min2 = minpix(2)-30; min3 = minpix(3)-6;
   max1 = maxpix(1)+30; max2 = maxpix(2)+30; max3 = maxpix(3)+6;
   if min1 < 1; min1=1; end 
   if min2 < 1; min2=1; end
   if min3 < 1; min3=1; end
   if max1 > info.Width; max1=info.Width; end
   if max2 > info.Height; max2=info.Height; end
   if max3 > num_images; max3=num_images; end      
   BPp(i).mat = BP(min2:max2,min1:max1,min3:max3); 
   BP2p(i).mat = BP2(min2:max2,min1:max1,min3:max3); 
end
%

for jj=1:numel(statsGwater)
   %
   disp(jj)
   minpix = min(statsGwater(jj).PixelList);  maxpix = max(statsGwater(jj).PixelList);
   min1 = minpix(1)-30; min2 = minpix(2)-30; min3 = minpix(3)-6;
   max1 = maxpix(1)+30; max2 = maxpix(2)+30; max3 = maxpix(3)+6;
   if min1 < 1; min1=1; end 
   if min2 < 1; min2=1; end
   if min3 < 1; min3=1; end
   if max1 > info.Width; max1=info.Width; end
   if max2 > info.Height; max2=info.Height; end
   if max3 > num_images; max3=num_images; end        

   size1 = max1-min1 + 1; size2 = max2-min2 + 1; size3 = max3-min3 + 1;
   curr2 = false(size2, size1, size3);

   for j=1: numel(statsGwater(jj).PixelList(:,1))
       curr2(statsGwater(jj).PixelList(j,2)-min2+1, ...
          statsGwater(jj).PixelList(j,1)-min1+1, ...
          statsGwater(jj).PixelList(j,3)-min3+1)= 1;  
   end
   curr1a = BPp(jj).mat;
   curr1b = BP2p(jj).mat;
   Dg = bwdistsc(curr2,[voxel(1),voxel(2),voxel(3)]);
%
  
   size2= 70;
   curr3b = Dg<=(size2); curr4b = or(curr2,curr3b);
   [y,x,z] = ind2sub(size(curr4b),find(curr4b));
   PixelList_m140 = [x,y,z];
   RPixelValues_m140 = zeros(numel(PixelList_m140(:,1)),1);
   for kk=1:numel(PixelList_m140(:,1))
      RPixelValues_m140(kk) = curr1b(PixelList_m140(kk,2),...
          PixelList_m140(kk,1), PixelList_m140(kk,3));
   end

   statsGwater(jj).tints_p140 = sum([RPixelValues_m140]);
   statsGwater(jj).area_p140 = numel([RPixelValues_m140]);
   statsGwater(jj).volume_p140 = numel([RPixelValues_m140]>0);
   statsGwater(jj).WeightedCentroid_p140(1) = sum([PixelList_m140(:,1)].*...
           double([RPixelValues_m140]))/(sum([RPixelValues_m140]));
   statsGwater(jj).WeightedCentroid_p140(2) = sum([PixelList_m140(:,2)].*...
           double([RPixelValues_m140]))/(sum([RPixelValues_m140]));
   statsGwater(jj).WeightedCentroid_p140(3) =  sum([PixelList_m140(:,3)].*...
           double([RPixelValues_m140]))/(sum([RPixelValues_m140]));
%also add these statxture, 
   statsGwater(jj).statxtureP_140all = statxture([RPixelValues_m140]);
   posvals2 = [RPixelValues_m140]>0;
   statsGwater(jj).statxtureP_70pos = statxture([RPixelValues_m140(posvals2)]);
   centG_p140(jj,:) = statsGwater(jj).WeightedCentroid_p140;
   tintsG_p140(jj) = statsGwater(jj).tints_p140;
   volumeG_p140(jj) =statsGwater(jj).volume_p140;
  
   
   statsGwater(jj).statxture_all = statxture([statsGwater(jj).PixelValues]);
   posvals = [statsGwater(jj).PixelValues]>0;
   statsGwater(jj).statxture_pos = statxture([statsGwater(jj).PixelValues(posvals)]);
   statxture_all(jj,:) = statsGwater(jj).statxture_all;
   statxture_pos(jj,:) = statsGwater(jj).statxture_pos;
end
%%
%pair
%
tintsG_p140 = [statsGwater.tints_p140];
pairedg_idx = find(tintsG_p140);
numel(pairedg_idx)/numel(tintsG_p140)
statsGwater_ssss = statsGwater(pairedg_idx);
%%
%save, go back to V_add_to to continue the processing
statsRwater_sss = statsRwater_ssss;
statsGwater_sss = statsGwater_ssss;
new_path = [Base_folder 'analysis\Result\'];
save([new_path 'G_paired_2.mat'],'statsGwater_sss');
save([new_path 'R_paired_2.mat'],'statsRwater_sss');